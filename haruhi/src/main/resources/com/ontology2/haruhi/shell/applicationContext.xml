<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context-4.0.xsd">

  <!-- comment numbering works like ISO 9001 or a PMI book just not so deep a hierarchy the top level schema is now 1 configuration of Spring itself 2 configuration of general infovore beans 3 bean definitions for Amazon EMR -->

  <!-- 1.0 automatically scan classpath for apps -->

  <context:component-scan base-package="com.ontology2.haruhi">
    <context:include-filter type="assignable" expression="com.ontology2.centipede.shell.CommandLineApplication" />
    <context:exclude-filter type="assignable" expression="com.ontology2.haruhi.HaruhiShell" />
  </context:component-scan>

  <!-- 1.1 make system properties available -->
  <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="locations" value="classpath:com/ontology2/haruhi/version.properties"/>
    <property name="systemPropertiesMode" value="1"/>
  </bean>


  <!-- 2.0 configuration of major resources -->
  <bean name="s3JarPath" class="java.lang.String">
    <constructor-arg value="s3://bakemono-public/" />
  </bean>

  <bean name="localCmdCluster defaultCluster" class="com.ontology2.haruhi.LocalCmdCluster">
    <property name="mavenRepoPath">
      <value>${user.home}/.m2/repository</value>
    </property>
  </bean>

  <!-- the defaultJar is the default JAR we run; override it to change the default -->
  <!-- bakemonoJar sets the defaults for bakemono derivatives; inherit from it -->
  <!-- we're assuming that haruhi and bakemono are being updated in lockstep -->

  <bean name="bakemonoJar defaultJar" class="com.ontology2.haruhi.MavenManagedJar">
    <property name="groupId" value="com.ontology2" />
    <property name="artifactId" value="bakemono" />
    <property name="version" value="${com.ontology2.haruhi.version}" />
    <property name="classifier" value="job" />
    <property name="headArguments">
      <list>
        <value>run</value>
      </list>
    </property>
  </bean>
  

  


  <bean name="t20130902" parent="bakemonoJar">
    <property name="version" value="t20130902" />
  </bean>
  
  <!-- 3.0 Bean Definitions For Amazon EMR that the user almost certainly needs to change -->
  <!-- note that this all depends on a "awsCredentials" object being defined in your .haruhi/applicationContext.xml -->
  <!-- we're not going to reference this from inside Spring because we don't want to force you to set -->
  <!-- AWS credentials if you are not using AWS -->

  <bean name="awsCredentials" class="com.amazonaws.auth.BasicAWSCredentials">
    <constructor-arg value="redacted" />
    <constructor-arg value="redacted" />
  </bean>

  <bean name="awsLogUri" class="java.lang.String">
    <constructor-arg value="s3://bakemono-logs/" />
  </bean>

  <bean name="localLogTarget" class="java.lang.String">
    <constructor-arg value="/freebase/logs/" />
  </bean>

  <bean name="awsSoftwareBucket" class="java.lang.String">
    <constructor-arg value="s3://bakemono-public/" />
  </bean>

  <bean name="awsBillingBucket" class="java.lang.String">
    <constructor-arg value="" />
  </bean>
  
  <!-- 3.1 definition of commonly used objects-->
  
  <bean name="emrClient" class="com.amazonaws.services.elasticmapreduce.AmazonElasticMapReduceClient">
    <constructor-arg ref="awsCredentials"/>
  </bean>

  <bean name="ec2Client" class="com.amazonaws.services.ec2.AmazonEC2Client">
    <constructor-arg ref="awsCredentials"/>
  </bean>

  <bean name="s3Client" class="com.amazonaws.services.s3.AmazonS3Client">
    <constructor-arg ref="awsCredentials"/>
  </bean>

  <bean name="transferManager" class="com.amazonaws.services.s3.transfer.TransferManager">
    <constructor-arg ref="s3Client"/>
    <!--
    <constructor-arg>
      <bean class="java.util.concurrent.Executors" factory-method="newFixedThreadPool">
        <constructor-arg value="25" />
      </bean>
    </constructor-arg>
    -->
  </bean>
  
  <bean name="stepFactory" class="com.amazonaws.services.elasticmapreduce.util.StepFactory" />
  
  <bean name="debugStep" scope="prototype" class="com.amazonaws.services.elasticmapreduce.model.StepConfig">
    <property name="name" value="Enable Debugging" />
    <property name="actionOnFailure" value="TERMINATE_JOB_FLOW" />
    <property name="hadoopJarStep">
      <bean factory-bean="stepFactory" factory-method="newEnableDebuggingStep" />
    </property>
  </bean>

  <bean name="rootInstancesDefinition" class="com.amazonaws.services.elasticmapreduce.model.JobFlowInstancesConfig" abstract="true">
    <property name="hadoopVersion" value="1.0.3" />
    <property name="masterInstanceType" value="m1.small" />
    <property name="slaveInstanceType" value="c1.medium" />
    <property name="keepJobFlowAliveWhenNoSteps" value="false" />
    <property name="instanceCount" value="2" /> <!--  the master + 1 slave = 1 -->
  </bean>
  
  <!--  3.2 here we define specific clusters that you might want to use -->
  
  <!--  cheapest feasible cluster,  contains just the master node which does double -->
  <!--  duties as JobTracker and TaskTracker;  this will get work done,  but slowly --> 
  <!--  great for testing lifecycle issues (will the job even start?) -->
  
  <bean name="tinyAwsCluster" class="com.ontology2.haruhi.AmazonEMRCluster">
    <constructor-arg>
       <bean parent="rootInstancesDefinition">
        <property name="instanceCount" value="1" /> 
       </bean>
    </constructor-arg>
  </bean>
  
  <!-- this cluster is suitable for small runs with real data-->
  
  <bean name="c1LargeX2AwsCluster smallAwsCluster" class="com.ontology2.haruhi.AmazonEMRCluster">
    <constructor-arg>
      <bean parent="rootInstancesDefinition">
        <property name="masterInstanceType" value="m1.medium" />
        <property name="slaveInstanceType" value="c1.xlarge" />
        <property name="instanceCount" value="3" /> <!-- 1 master + 2 slaves --> 
      </bean>
    </constructor-arg>
  </bean>
  
    <bean name="c1LargeX6AwsCluster mediumAwsCluster" class="com.ontology2.haruhi.AmazonEMRCluster">
    <constructor-arg>
      <bean parent="rootInstancesDefinition">
        <property name="masterInstanceType" value="m1.medium" />
        <property name="slaveInstanceType" value="c1.xlarge" />
        <property name="instanceCount" value="7" /> <!-- 1 master + 6 slaves --> 
      </bean>
    </constructor-arg>
    </bean>

   <bean name="c1LargeX12AwsCluster largeAwsCluster" class="com.ontology2.haruhi.AmazonEMRCluster">
     <constructor-arg>
      <bean parent="rootInstancesDefinition">
        <property name="masterInstanceType" value="m1.large" />
        <property name="slaveInstanceType" value="c1.xlarge" />
        <property name="instanceCount" value="13" /> <!-- 1 master + 12 slaves -->
       </bean>
    </constructor-arg>
  </bean>

  <bean name="c1LargeX25AwsCluster weeklyAwsCluster" class="com.ontology2.haruhi.AmazonEMRCluster">
    <constructor-arg>
      <bean parent="rootInstancesDefinition">
        <property name="masterInstanceType" value="m1.large" />
        <property name="slaveInstanceType" value="c1.xlarge" />
        <property name="instanceCount" value="25" /> <!-- 1 master + 24 slaves -->
      </bean>
    </constructor-arg>
  </bean>


  <bean name="m1XLargeX2AwsCluster" class="com.ontology2.haruhi.AmazonEMRCluster">
  <constructor-arg>
    <bean parent="rootInstancesDefinition">
      <property name="masterInstanceType" value="m1.large" />
      <property name="slaveInstanceType" value="m1.xlarge" />
      <property name="instanceCount" value="3" /> <!-- 1 master + 2 slaves -->
    </bean>
  </constructor-arg>
</bean>

  <bean name="m1XLargeX5AwsCluster" class="com.ontology2.haruhi.AmazonEMRCluster">
    <constructor-arg>
      <bean parent="rootInstancesDefinition">
        <property name="masterInstanceType" value="m1.large" />
        <property name="slaveInstanceType" value="m1.xlarge" />
        <property name="instanceCount" value="5" /> <!-- 1 master + 2 slaves -->
      </bean>
    </constructor-arg>
  </bean>
</beans>
 
